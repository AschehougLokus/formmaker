parameters:
  test.admin.controller.class: MakingWaves\FormMakerBundle\Controller\DefaultController
  request.provider.class: Symfony\Component\HttpFoundation\Request
  list.controller.class: MakingWaves\FormMakerBundle\Controller\ListController
  edit.controller.class: MakingWaves\FormMakerBundle\Controller\EditController
  remove.controller.class: MakingWaves\FormMakerBundle\Controller\RemoveController
  answers.controller.class: MakingWaves\FormMakerBundle\Controller\AnswersController
  formmaker.fieldType.form.class: MakingWaves\FormMakerBundle\eZ\Publish\FieldType\Form\Type
  formmaker.user.class: MakingWaves\FormMakerBundle\Services\User
  formmaker.pages.factory.class: MakingWaves\FormMakerBundle\Services\PagesFactory
  formmaker.pages.container.class: MakingWaves\FormMakerBundle\Services\PagesContainer
  formmaker.form.session.class: MakingWaves\FormMakerBundle\Services\FormSession

services:
  # Defining this controller as a service so it can be called from the container
  # in the legacy module
  test.admin.controller:
    class: %test.admin.controller.class%
    calls:
    # This setter is mandatory to be able to use all shorthand methods
      - [setContainer, [@service_container]]

  request.provider:
    class: %request.provider.class%

  list.controller:
    class: %list.controller.class%
    calls:
    # This setter is mandatory to be able to use all shorthand methods
      - [setContainer, [@service_container]]

  edit.controller:
    class: %edit.controller.class%
    calls:
    # This setter is mandatory to be able to use all shorthand methods
      - [setContainer, [@service_container]]

  remove.controller:
    class: %remove.controller.class%
    calls:
    # This setter is mandatory to be able to use all shorthand methods
      - [setContainer, [@service_container]]

  answers.controller:
    class: %answers.controller.class%
    calls:
    # This setter is mandatory to be able to use all shorthand methods
      - [setContainer, [@service_container]]
      
  # Register field type
  formmaker.fieldType.form:
    parent: ezpublish.fieldType
    class: %formmaker.fieldType.form.class%
    tags:
      - {name: ezpublish.fieldType, alias: form}
    arguments: [ @formmaker.pages.container ]

  # Register field type converter
  formmaker.storageEngine.legacy.converter:
    class: MakingWaves\FormMakerBundle\eZ\Publish\FieldType\Form\LegacyConverter
    tags:
      - {name: ezpublish.storageEngine.legacy.converter, alias: form}

  formmaker.user:
    class: %formmaker.user.class%
    arguments: [ @ezpublish.api.service.user ]

  formmaker.pages.factory:
    class: %formmaker.pages.factory.class%
    arguments: [ @formmaker.form.session ]

  formmaker.form.session:
    class: %formmaker.form.session.class%
    arguments: [ @session ]

  formmaker.pages.container:
    class: %formmaker.pages.container.class%
    arguments: [ @doctrine.orm.entity_manager, @formmaker.pages.factory, @formmaker.form.session ]

  formmaker.attributesform.eventSubscriber:
    class: MakingWaves\FormMakerBundle\Form\EventListener\AttribFieldsSubscriber
    arguments: [@service_container]

  formmaker.forms.eventSubscriber.attributes:
     class: MakingWaves\FormMakerBundle\Form\EventListener\AttribFieldsSubscriber
     arguments: [@service_container]

  formmaker.forms.type.attributes:
     class: MakingWaves\FormMakerBundle\Form\FormAttributesType
     arguments: [@doctrine.orm.entity_manager, @formmaker.forms.eventSubscriber.attributes]

  formmaker.forms.type.definitions:
    class: MakingWaves\FormMakerBundle\Form\FormDefinitionsType
    arguments: [@service_container, @formmaker.forms.type.attributes]

